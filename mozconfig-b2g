# Compiler
export CC=$HOME/.mozbuild/clang/bin/clang
export CXX=$HOME/.mozbuild/clang/bin/clang++
export LLVMCONFIG=$HOME/.mozbuild/clang/bin/llvm-config
#export LLVM_CONFIG=$HOME/.mozbuild/clang/bin/llvm-config
export AR=$HOME/.mozbuild/clang/bin/llvm-ar
export NM=$HOME/.mozbuild/clang/bin/llvm-nm
export RANLIB=$HOME/.mozbuild/clang/bin/llvm-ranlib
#export CBINDGEN=$HOME/.mozbuild/cbindgen/cbindgen

# Build B2G
ac_add_options --enable-application=b2g
ac_add_options --target=$TARGET_TRIPLE
ac_add_options --enable-linker=lld
ac_add_options --with-app-basename=b2g

if [ "$HOST_OS" != "linux" ]; then
  ac_add_options --disable-crashreporter
fi

# Disable a bunch of non critical stuff
ac_add_options --disable-printing
ac_add_options --disable-updater
ac_add_options --disable-cranelift
# Disable telemetry
ac_add_options MOZ_TELEMETRY_REPORTING=

if [ "${B2G_DEBUG:-0}" != "0" ]; then
  ac_add_options --enable-debug
else
  if [ "${MOZ_DISABLE_LTO:-0}" = "0" ]; then
    # Enable Rust <-> C++ LTO
    ac_add_options --enable-lto
    export MOZ_LTO=cross
  fi
fi

# Optimize the build
ac_add_options --disable-profiling
ac_add_options --enable-small-chunk-size

# With the following Android SDK and NDK:
ac_add_options --with-android-ndk=$ANDROID_NDK
ac_add_options --with-android-version=$PLATFORM_VERSION

# Use sccache
ac_add_options --with-ccache=sccache

# Auto-clobber
mk_add_options AUTOCLOBBER=1

# Gonk-specific stuff
ac_add_options --with-gonk-gfx
ac_add_options --with-gonk="$(realpath $GECKO_OBJDIR/b2g-sysroot)"

# Customize the objdir.
if [ -f "$GECKO_OBJDIR" ]; then
mk_add_options MOZ_OBJDIR="$GECKO_OBJDIR"
fi

# Pretend to be an official build to be in a release configuration.
export MOZILLA_OFFICIAL=1
# elf hack fails with a "Segments overlap" error.
if [ "$TARGET_ARCH" != "arm64" ]; then
  ac_add_options --disable-elf-hack
fi;

# TARGET_BUILD_VARIANT stuff
if [ "$TARGET_ARCH_VARIANT" = "$TARGET_ARCH" ] ||
   [ "$TARGET_ARCH_VARIANT" = "generic" ]; then
TARGET_ARCH_VARIANT=""
else
TARGET_ARCH_VARIANT="_$TARGET_ARCH_VARIANT"
fi

if [ "$TARGET_CPU_VARIANT" = "$TARGET_ARCH" ] ||
   [ "$TARGET_CPU_VARIANT" = "generic" ]; then
TARGET_CPU_VARIANT=""
else
TARGET_CPU_VARIANT="_$TARGET_CPU_VARIANT"
fi

ac_add_options --with-target-arch-name="${TARGET_ARCH}${TARGET_ARCH_VARIANT}${TARGET_CPU_VARIANT}"
ac_add_options --target-build-variant="$TARGET_BUILD_VARIANT"
if [ "$TARGET_BUILD_VARIANT" != "user" ] ; then
ENABLE_MARIONETTE=1
ENABLE_TESTS=1
fi

if [ "$TARGET_BUILD_VARIANT" != "user" ] ; then
  # Since some device branches do not have engineering builds, we should enable profiler for
  # both engineering builds and userdebug builds.
  ac_add_options --enable-profiling
fi

ac_add_options --enable-b2g-camera
ac_add_options --enable-forkserver

ac_add_options --enable-b2g-ril
ac_add_options --enable-b2g-fm

if [ "$IME_ENGINE" = "touchpal" ]; then
  ac_add_options --enable-touchpal
fi

if [ "$TARGET_ARCH" = "x86_64" ]; then
  ac_add_options --enable-wasm-simd
fi;

# Disable until we figure out CI issues
# ac_add_options --enable-clang-plugin

if [ -f "$KAI_PUSH_KEY_FILE" ]; then
ac_add_options --with-kaios-push-api-keyfile="$KAI_PUSH_KEY_FILE"
fi

if [ -f "$KAI_SERVICE_KEY_FILE" ]; then
ac_add_options --with-kaios-service-api-keyfile="$KAI_SERVICE_KEY_FILE"
fi

ac_add_options --with-sandbox-gpu-node="$MOZ_SANDBOX_GPU_NODE"
