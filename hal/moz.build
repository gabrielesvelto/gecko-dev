# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

with Files('**'):
    BUG_COMPONENT = ('Core', 'Hardware Abstraction Layer (HAL)')

EXPORTS.mozilla += [
    'Hal.h',
    'HalBatteryInformation.h',
    'HalImpl.h',
    'HalNetworkInformation.h',
    'HalSandbox.h',
    'HalScreenConfiguration.h',
    'HalSensor.h',
    'HalTypes.h',
    'HalWakeLock.h',
    'HalWakeLockInformation.h',
]

EXPORTS.mozilla.fallback += [
    'fallback/FallbackScreenConfiguration.h',
]

UNIFIED_SOURCES += [
    'HalWakeLock.cpp',
    'sandbox/SandboxHal.cpp',
    'WindowIdentifier.cpp',
]

# Hal.cpp cannot be built in unified mode because it relies on HalImpl.h.
SOURCES += [
    'Hal.cpp',
]

if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'android':
    LOCAL_INCLUDES += [
        '/widget/android',
    ]
    UNIFIED_SOURCES += [
        'android/AndroidProcessPriority.cpp',
        'android/AndroidSensor.cpp',
        'fallback/FallbackAlarm.cpp',
        'fallback/FallbackFlashlightManager.cpp',
    ]
    # AndroidHal.cpp cannot be built in unified mode because it relies on HalImpl.h.
    SOURCES += [
        'android/AndroidHal.cpp',
    ]
elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gonk':
    UNIFIED_SOURCES += [
        # TODO: FIXME 'gonk/GonkDiskSpaceWatcher.cpp',
        'fallback/FallbackProcessPriority.cpp',
        'fallback/FallbackScreenConfiguration.cpp',
        'gonk/GonkSensor.cpp',
        'gonk/GonkSensorsHal.cpp',
        'gonk/GonkSwitch.cpp',
        'gonk/SystemService.cpp',
        'gonk/UeventPoller.cpp',
        'linux/LinuxMemory.cpp',
        # TODO: FIXME 'linux/LinuxPower.cpp',
    ]
    # GonkHal.cpp cannot be built in unified mode because it relies on HalImpl.h.
    SOURCES += [
        'gonk/GonkHal.cpp',
    ]
    LOCAL_INCLUDES += [
        '%' + '%s/%s' % (CONFIG['GONK_PATH'], d) for d in [
            'frameworks/av/camera/include/camera',
            'out/soong/.intermediates/frameworks/av/camera/libcamera_client/android_%s_core_shared/gen/aidl' % CONFIG['TARGET_ARCH_NAME'],
            'out/soong/.intermediates/hardware/interfaces/graphics/bufferqueue/1.0/android.hardware.graphics.bufferqueue@1.0_genc++_headers/gen',
            'out/soong/.intermediates/hardware/interfaces/graphics/bufferqueue/2.0/android.hardware.graphics.bufferqueue@2.0_genc++_headers/gen',
            'out/soong/.intermediates/hardware/interfaces/graphics/common/1.0/android.hardware.graphics.common@1.0_genc++_headers/gen',
            'out/soong/.intermediates/hardware/interfaces/graphics/common/1.1/android.hardware.graphics.common@1.1_genc++_headers/gen',
            'out/soong/.intermediates/hardware/interfaces/graphics/common/1.2/android.hardware.graphics.common@1.2_genc++_headers/gen',
            'out/soong/.intermediates/hardware/interfaces/media/1.0/android.hardware.media@1.0_genc++_headers/gen',
            'out/soong/.intermediates/hardware/interfaces/media/omx/1.0/android.hardware.media.omx@1.0_genc++_headers/gen',
            'out/soong/.intermediates/hardware/interfaces/sensors/1.0/android.hardware.sensors@1.0_genc++_headers/gen',
            'system/libhidl/transport/token/1.0/utils/include',
            'system/media/camera/include',
        ]
    ]

    if CONFIG['PRODUCT_MANUFACTURER_MTK'] :
        UNIFIED_SOURCES += [
            'gonk/mtk_fm/GonkFMRadio.cpp',
        ]
        SOURCES += [
           'gonk/mtk_fm/common.cpp',
           'gonk/mtk_fm/fmr_core.cpp',
           'gonk/mtk_fm/fmr_err.cpp',
        ]
    elif CONFIG['PRODUCT_MANUFACTURER_SPRD'] :
        UNIFIED_SOURCES += [
            'gonk/sprd_fm/GonkFMRadio.cpp'
        ]

        SOURCES += [
            'gonk/sprd_fm/common.cpp',
            'gonk/sprd_fm/fmr_core.cpp',
            'gonk/sprd_fm/fmr_err.cpp'
        ]
    else:
        UNIFIED_SOURCES += [
            'gonk/GonkFMRadio.cpp',
        ]

elif CONFIG['OS_TARGET'] == 'Linux':
    UNIFIED_SOURCES += [
        'fallback/FallbackAlarm.cpp',
        'fallback/FallbackFlashlightManager.cpp',
        'fallback/FallbackNetwork.cpp',
        'fallback/FallbackProcessPriority.cpp',
        'fallback/FallbackScreenConfiguration.cpp',
        'fallback/FallbackSensor.cpp',
        'fallback/FallbackVibration.cpp',
        'linux/LinuxMemory.cpp',
    ]
    if CONFIG['MOZ_ENABLE_DBUS']:
        UNIFIED_SOURCES += [
            'linux/UPowerClient.cpp',
        ]
    else:
        UNIFIED_SOURCES += [
            'fallback/FallbackBattery.cpp',
        ]
elif CONFIG['OS_TARGET'] == 'WINNT':
    UNIFIED_SOURCES += [
        'fallback/FallbackAlarm.cpp',
        'fallback/FallbackFlashlightManager.cpp',
        'fallback/FallbackMemory.cpp',
        'fallback/FallbackNetwork.cpp',
        'fallback/FallbackScreenConfiguration.cpp',
        'fallback/FallbackVibration.cpp',
        'windows/WindowsProcessPriority.cpp',
        'windows/WindowsSensor.cpp',
    ]
    # WindowsBattery.cpp cannot be built in unified mode because it relies on HalImpl.h.
    SOURCES += [
        'windows/WindowsBattery.cpp',
    ]
elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'cocoa':
    UNIFIED_SOURCES += [
        'cocoa/CocoaBattery.cpp',
        'fallback/FallbackAlarm.cpp',
        'fallback/FallbackFlashlightManager.cpp',
        'fallback/FallbackMemory.cpp',
        'fallback/FallbackNetwork.cpp',
        'fallback/FallbackProcessPriority.cpp',
        'fallback/FallbackScreenConfiguration.cpp',
        'fallback/FallbackVibration.cpp',
    ]
elif CONFIG['OS_TARGET'] in ('OpenBSD', 'NetBSD', 'FreeBSD', 'DragonFly'):
    UNIFIED_SOURCES += [
        'fallback/FallbackAlarm.cpp',
        'fallback/FallbackFlashlightManager.cpp',
        'fallback/FallbackMemory.cpp',
        'fallback/FallbackNetwork.cpp',
        'fallback/FallbackProcessPriority.cpp',
        'fallback/FallbackScreenConfiguration.cpp',
        'fallback/FallbackSensor.cpp',
        'fallback/FallbackVibration.cpp',
    ]
    if CONFIG['MOZ_ENABLE_DBUS']:
        UNIFIED_SOURCES += [
            'linux/UPowerClient.cpp',
        ]
    else:
        UNIFIED_SOURCES += [
            'fallback/FallbackBattery.cpp',
        ]
else:
    UNIFIED_SOURCES += [
        'fallback/FallbackAlarm.cpp',
        'fallback/FallbackBattery.cpp',
        'fallback/FallbackFlashlightManager.cpp',
        'fallback/FallbackMemory.cpp',
        'fallback/FallbackNetwork.cpp',
        'fallback/FallbackProcessPriority.cpp',
        'fallback/FallbackScreenConfiguration.cpp',
        'fallback/FallbackSensor.cpp',
        'fallback/FallbackVibration.cpp',
    ]

# Fallbacks for backends implemented on Gonk only.
if CONFIG['MOZ_WIDGET_TOOLKIT'] != 'gonk':
    UNIFIED_SOURCES += [
        'fallback/FallbackSystemService.cpp',
    ]

if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'cocoa':
    UNIFIED_SOURCES += [
        'cocoa/CocoaSensor.mm',
        'cocoa/smslib.mm',
    ]

IPDL_SOURCES = [
    'sandbox/PHal.ipdl',
]

include('/ipc/chromium/chromium-config.mozbuild')

FINAL_LIBRARY = 'xul'

LOCAL_INCLUDES += [
    '/dom/base',
]

if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gonk':
    # So that we can call nsScreenManagerGonk::GetConfiguration().
    LOCAL_INCLUDES += [
        '/widget',
        '/widget/gonk',
    ]
    LOCAL_INCLUDES += ['%' + '%s/hardware/libhardware/include' % CONFIG['GONK_PATH']]
    LOCAL_INCLUDES += ['%' + '%s/hardware/libhardware_legacy/include' % CONFIG['GONK_PATH']]

CFLAGS += CONFIG['GLIB_CFLAGS']
CFLAGS += CONFIG['MOZ_DBUS_GLIB_CFLAGS']
CXXFLAGS += CONFIG['GLIB_CFLAGS']
CXXFLAGS += CONFIG['MOZ_DBUS_GLIB_CFLAGS']
